/*
	SerializationRCEExploitIssue.java
	
	v0.1 (12/2/2015)
	
	Custom Burp Scan Issue for a successful Remote Code Execution exploit.
*/

package burp;

import java.net.*;

public class SerializationRCEExploitIssue implements IScanIssue {
	//inherited fields
	private String confidence;
	private IHttpRequestResponse[] httpMessages;
	private IHttpService httpService;
	private String issueBackground;
	private String issueDetail;
	private String issueName;
	private int issueType;
	private String remediationBackground;
	private String remediationDetail;
	private String severity;
	private URL url;
	
	private static final String ISSUE_BACKGROUND = "Java deserialization vulnerabilities occur when an application fails to properly sanitize user-supplied Java "+
													"serialized data. Just like any other HTTP request, all user-controlled input must be validated on the server side."+
													" If the application does not sanitize or validate the serialized object safely, subsequent library methods within "+
													"the class path can be leveraged for code execution by reading the object using the readObject() method. The three "+
													"primary libraries leveraged for further exploitation are: Spring Framework <=3.0.5, <=2.0.6, Groovy < 2.44, Apache "+
													"Commons Collection.<br><br><b>Credit</b>: Credit is given to the presentation \"Marshalling Pickles - AppSec "+
													"California 2015\" by Chris Frohoff & Gabrial Lawrence; Mattias Kaiser's presentation \"Exploiting Deserialization"+
													" Vulnerabilities in Java\"; and the blog from Foxglove Security titled \"What Do WebLogic, WebSphere, JBoss, "+
													"Jenkins, OpenNMS, and Your Application Have in Common. This Vulnerability\" for bringing this issue to our attention.";
	private static final String REM_BACKGROUND = "Each remediation effort may vary due to application functionality, limitations of the environment and the libraries being "+
													"utilized. For all third provided software solutions such as JBoss, WebSphere, WebLogic, Jenkins and OpenNMS, contact the"+
													" vendor for security update information. All other developed applications should override the resolveClass method from "+
													"the ObjectInputStream class. The goal of overriding method is to limit the objects being deserialized to those that are "+
													"expected or desired. All other objects being deserialized should be ignored and disposed of properly. More details can be"+
													" read in the following article entitled “Look-ahead Java deserialization” written in January 2013: "+
													"<a href=\"http://www.ibm.com/developerworks/library/se-lookahead/\">http://www.ibm.com/developerworks/library/se-lookahead/</a>";
	
	//input parameters:
	//exploitRR: request/response to victim system including exploit payload
	//nodeRR: request/response to Node to retrieve uploaded file
	//hs: IHttpService for exploitRR
	//u: URL of vulnerability
	//cmd: command to execute on victim system embedded in exploit payload
	//tech: the technique used to generate the exploit payload
	//src: the IP of the host that uploaded the file to the node
	//time: the time that the file was uploaded
	//os: the detected operating system of the victim system
	//ul: whether scan issue included downloading an access entry (false) or an uploaded file (true)
	public SerializationRCEExploitIssue(IHttpRequestResponse exploitRR,IHttpRequestResponse nodeRR,URL u,String tech,String cmd,String src,String time,String os,boolean ul) {
		confidence = "Certain";
		httpMessages = new IHttpRequestResponse[] {exploitRR,nodeRR};
		httpService = exploitRR.getHttpService();
		issueBackground = ISSUE_BACKGROUND;
		issueDetail = constructIssueDetail(tech,cmd,src,time,os,ul);
		issueName = "Java Deserialization Vulnerability";
		issueType = 0;
		remediationBackground = REM_BACKGROUND;
		remediationDetail = null;
		severity = "High";
		url = u;
	}
	
	//input parameters:
	//tech: the technique used to generate the exploit payload
	//cmd: command that was executed on the victim system
	//src: IP address that accessed node/uploaded file
	//tm: time that node was accessed/file was uploaded
	//os: detected operating system of victim system
	//ul: whether scan issue included downloading an access entry (false) or an uploaded file (true)
	private String constructIssueDetail(String tech,String cmd,String src,String tm,String os,boolean ul) {
		String retVal = "The application is vulnerable to Java Deserialization Remote Code Execution. An exploit payload containing the system command <b>"+cmd+"</b>, ";
		if(ul)
			retVal += "which was intended to cause the target system to upload a file to the SuperSerial node, ";
		else
			retVal += "which was intended to cause the target system to access the SuperSerial node, ";
		retVal += "was created using the <b>"+tech+"</b> method. The payload was sent to the target URL, and at <b>"+tm+"</b> the SuperSerial node received an HTTP"+
					" request from <b>"+src+"</b>";
		if(ul)
			retVal += " containing a file. The Burp Active Scanner then retrieved the uploaded file from the SuperSerial node";
		retVal += ".<br><br>Based on the system command that was included in the exploit payload";
		if(ul)
			retVal += " and the contents of the file uploaded to the SuperSerial node";
		retVal += ", the target system appears to be running <b>"+os+"</b>.";
		
		return retVal;
	}
	
	@Override
	public String getConfidence() {
		return confidence;
	}
	
	@Override
	public IHttpRequestResponse[] getHttpMessages() {
		return httpMessages;
	}
	
	@Override
	public IHttpService getHttpService() {
		return httpService;
	}
	
	@Override
	public String getIssueBackground() {
		return issueBackground;
	}
	
	@Override
	public String getIssueDetail() {
		return issueDetail;
	}
	
	@Override
	public String getIssueName() {
		return issueName;
	}
	
	@Override
	public int getIssueType() {
		return issueType;
	}
	
	@Override
	public String getRemediationBackground() {
		return remediationBackground;
	}
	
	@Override
	public String getRemediationDetail() {
		return remediationDetail;
	}
	
	@Override
	public String getSeverity() {
		return severity;
	}
	
	@Override
	public URL getUrl() {
		return url;
	}
}
